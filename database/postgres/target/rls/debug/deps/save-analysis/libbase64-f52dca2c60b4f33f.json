{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0","program":"/Users/watanabeshunsuke/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","base64","--edition=2018","/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=f52dca2c60b4f33f","-C","extra-filename=-f52dca2c60b4f33f","--out-dir","/Users/watanabeshunsuke/rust/training/database/postgres/target/rls/debug/deps","-L","dependency=/Users/watanabeshunsuke/rust/training/database/postgres/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/watanabeshunsuke/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/watanabeshunsuke/rust/training/database/postgres/target/rls/debug/deps/libbase64-f52dca2c60b4f33f.rmeta"},"prelude":{"crate_id":{"name":"base64","disambiguator":[10323398833028589008,6511146203204813392]},"crate_root":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src","external_crates":[{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4764348733193513031,634526535461708798]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/chunked_encoder.rs","num":2,"id":{"name":"core","disambiguator":[1442326455198172401,16827337489037353969]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12054269309559547164,403528097874103758]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18119295300660958056,15936712641001091472]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8467185899157176901,5449114614531918343]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6399579860591818883,1861182124498570286]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5934281359445186259,17569308659596391902]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13411228280306895108,18307809851336013232]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[6991553045555133022,10391329883647596551]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[12965431198908124934,18004796543845665014]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[17525835346239097561,8778688016660685031]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[16866301928884371641,12906074390672532027]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14707452596726515572,12648684369639413126]}},{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[6619135282819627752,14012907817905728436]}}],"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":0,"byte_end":8021,"line_start":1,"line_end":226,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":79},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/mod.rs","byte_start":18290,"byte_end":18303,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"DecoderReader","value":"","parent":{"krate":0,"index":65}},{"kind":"Use","ref_id":{"krate":0,"index":133},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/mod.rs","byte_start":82672,"byte_end":82685,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"EncoderWriter","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4013,"byte_end":4032,"line_start":95,"line_end":95,"column_start":24,"column_end":43},"alias_span":null,"name":"encode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":182},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4112,"byte_end":4118,"line_start":97,"line_end":97,"column_start":25,"column_end":31},"alias_span":null,"name":"encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":184},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4120,"byte_end":4133,"line_start":97,"line_end":97,"column_start":33,"column_end":46},"alias_span":null,"name":"encode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4135,"byte_end":4152,"line_start":97,"line_end":97,"column_start":48,"column_end":65},"alias_span":null,"name":"encode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":225},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4246,"byte_end":4252,"line_start":101,"line_end":101,"column_start":25,"column_end":31},"alias_span":null,"name":"decode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":227},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4254,"byte_end":4267,"line_start":101,"line_end":101,"column_start":33,"column_end":46},"alias_span":null,"name":"decode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4269,"byte_end":4286,"line_start":101,"line_end":101,"column_start":48,"column_end":65},"alias_span":null,"name":"decode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":233},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4313,"byte_end":4332,"line_start":102,"line_end":102,"column_start":25,"column_end":44},"alias_span":null,"name":"decode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":281},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4334,"byte_end":4345,"line_start":102,"line_end":102,"column_start":46,"column_end":57},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":0,"byte_end":8021,"line_start":1,"line_end":226,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":37},{"krate":0,"index":65},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":173},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":206},{"krate":0,"index":243},{"krate":0,"index":247},{"krate":0,"index":303},{"krate":0,"index":315},{"krate":0,"index":314},{"krate":0,"index":312},{"krate":0,"index":250},{"krate":0,"index":317},{"krate":0,"index":324},{"krate":0,"index":323},{"krate":0,"index":321},{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264}],"decl_id":null,"docs":" # Configs","sig":null,"attributes":[{"value":"! # Configs","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":0,"byte_end":13,"line_start":1,"line_end":1,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":14,"byte_end":17,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! There isn't just one type of Base64; that would be too simple. You need to choose a character","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":18,"byte_end":115,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"! set (standard, URL-safe, etc) and padding suffix (yes/no).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":116,"byte_end":178,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"! The `Config` struct encapsulates this info. There are some common configs included: `STANDARD`,","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":179,"byte_end":278,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"! `URL_SAFE`, etc. You can also make your own `Config` if needed.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":279,"byte_end":346,"line_start":6,"line_end":6,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":347,"byte_end":350,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! The functions that don't have `config` in the name (e.g. `encode()` and `decode()`) use the","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":351,"byte_end":446,"line_start":8,"line_end":8,"column_start":1,"column_end":96}},{"value":"! `STANDARD` config .","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":447,"byte_end":470,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":471,"byte_end":474,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! The functions that write to a slice (the ones that end in `_slice`) are generally the fastest","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":475,"byte_end":572,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"! because they don't need to resize anything. If it fits in your workflow and you care about","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":573,"byte_end":667,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"! performance, keep using the same buffer (growing as need be) and use the `_slice` methods for","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":668,"byte_end":765,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"! the best performance.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":766,"byte_end":791,"line_start":14,"line_end":14,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":792,"byte_end":795,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! # Encoding","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":796,"byte_end":810,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":811,"byte_end":814,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! Several different encoding functions are available to you depending on your desire for","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":815,"byte_end":905,"line_start":18,"line_end":18,"column_start":1,"column_end":91}},{"value":"! convenience vs performance.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":906,"byte_end":937,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":938,"byte_end":941,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"! | Function                | Output                       | Allocates                      |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":942,"byte_end":1037,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"! | ----------------------- | ---------------------------- | ------------------------------ |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1038,"byte_end":1133,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"! | `encode`                | Returns a new `String`       | Always                         |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1134,"byte_end":1229,"line_start":23,"line_end":23,"column_start":1,"column_end":96}},{"value":"! | `encode_config`         | Returns a new `String`       | Always                         |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1230,"byte_end":1325,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"! | `encode_config_buf`     | Appends to provided `String` | Only if `String` needs to grow |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1326,"byte_end":1421,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"! | `encode_config_slice`   | Writes to provided `&[u8]`   | Never                          |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1422,"byte_end":1517,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1518,"byte_end":1521,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"! All of the encoding functions that take a `Config` will pad as per the config.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1522,"byte_end":1604,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1605,"byte_end":1608,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"! # Decoding","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1609,"byte_end":1623,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1624,"byte_end":1627,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! Just as for encoding, there are different decoding functions available.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1628,"byte_end":1703,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1704,"byte_end":1707,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! | Function                | Output                        | Allocates                      |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1708,"byte_end":1804,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"! | ----------------------- | ----------------------------- | ------------------------------ |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1805,"byte_end":1901,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"! | `decode`                | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1902,"byte_end":1998,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"! | `decode_config`         | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":1999,"byte_end":2095,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"! | `decode_config_buf`     | Appends to provided `Vec<u8>` | Only if `Vec` needs to grow    |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2096,"byte_end":2192,"line_start":38,"line_end":38,"column_start":1,"column_end":97}},{"value":"! | `decode_config_slice`   | Writes to provided `&[u8]`    | Never                          |","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2193,"byte_end":2289,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2290,"byte_end":2293,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! Unlike encoding, where all possible input is valid, decoding can fail (see `DecodeError`).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2294,"byte_end":2388,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2389,"byte_end":2392,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! Input can be invalid because it has invalid characters or invalid padding. (No padding at all is","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2393,"byte_end":2493,"line_start":43,"line_end":43,"column_start":1,"column_end":101}},{"value":"! valid, but excess padding is not.) Whitespace in the input is invalid.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2494,"byte_end":2568,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2569,"byte_end":2572,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! # `Read` and `Write`","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2573,"byte_end":2597,"line_start":46,"line_end":46,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2598,"byte_end":2601,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! To map a `Read` of b64 bytes to the decoded bytes, wrap a reader (file, network socket, etc)","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2602,"byte_end":2698,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"! with `base64::read::DecoderReader`. To write raw bytes and have them b64 encoded on the fly,","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2699,"byte_end":2795,"line_start":49,"line_end":49,"column_start":1,"column_end":97}},{"value":"! wrap a writer with `base64::write::EncoderWriter`. There is some performance overhead (15% or","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2796,"byte_end":2893,"line_start":50,"line_end":50,"column_start":1,"column_end":98}},{"value":"! so) because of the necessary buffer shuffling -- still fast enough that almost nobody cares.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2894,"byte_end":2990,"line_start":51,"line_end":51,"column_start":1,"column_end":97}},{"value":"! Also, these implementations do not heap allocate.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":2991,"byte_end":3044,"line_start":52,"line_end":52,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3045,"byte_end":3048,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"! # Panics","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3049,"byte_end":3061,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3062,"byte_end":3065,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"! If length calculations result in overflowing `usize`, a panic will result.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3066,"byte_end":3144,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3145,"byte_end":3148,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! The `_slice` flavors of encode or decode will panic if the provided output slice is too small,","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3149,"byte_end":3247,"line_start":58,"line_end":58,"column_start":1,"column_end":99}},{"value":"deny(missing_docs, trivial_casts, trivial_numeric_casts,\n       unused_extern_crates, unused_import_braces, unused_results,\n       variant_size_differences, warnings)","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3318,"byte_end":3508,"line_start":61,"line_end":70,"column_start":1,"column_end":3}},{"value":"forbid(unsafe_code)","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3509,"byte_end":3532,"line_start":71,"line_end":71,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/chunked_encoder.rs","byte_start":8348,"byte_end":8353,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Error","qualname":"::chunked_encoder::Sink::Error","value":"type Error;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":37},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"display","qualname":"::display","value":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":60}],"decl_id":null,"docs":" Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","sig":null,"attributes":[{"value":"! Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15567,"byte_end":15667,"line_start":1,"line_end":1,"column_start":1,"column_end":101}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15668,"byte_end":15671,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15672,"byte_end":15679,"line_start":3,"line_end":3,"column_start":1,"column_end":8}},{"value":"! use base64::display::Base64Display;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15680,"byte_end":15719,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15720,"byte_end":15723,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! let data = vec![0x0, 0x1, 0x2, 0x3];","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15724,"byte_end":15764,"line_start":6,"line_end":6,"column_start":1,"column_end":41}},{"value":"! let wrapper = Base64Display::with_config(&data, base64::STANDARD);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15765,"byte_end":15835,"line_start":7,"line_end":7,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15836,"byte_end":15839,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! assert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15840,"byte_end":15907,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"! ```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":15908,"byte_end":15915,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":46},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16144,"byte_end":16157,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"Base64Display","qualname":"::display::Base64Display","value":"Base64Display {  }","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" A convenience wrapper for base64'ing bytes into a format string without heap allocation.\n","sig":null,"attributes":[{"value":"/ A convenience wrapper for base64'ing bytes into a format string without heap allocation.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16040,"byte_end":16132,"line_start":17,"line_end":17,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16324,"byte_end":16335,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Base64Display>::with_config","value":"fn (bytes: &[u8], config: Config) -> Base64Display","parent":null,"children":[],"decl_id":null,"docs":" Create a `Base64Display` with the provided config.\n","sig":null,"attributes":[{"value":"/ Create a `Base64Display` with the provided config.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16258,"byte_end":16312,"line_start":24,"line_end":24,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":65},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/mod.rs","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":114}],"decl_id":null,"docs":" Implementations of `io::Read` to transparently decode base64.\n","sig":null,"attributes":[{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3866,"byte_end":3900,"line_start":88,"line_end":88,"column_start":1,"column_end":35}},{"value":"! Implementations of `io::Read` to transparently decode base64.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/mod.rs","byte_start":18188,"byte_end":18253,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19300,"byte_end":19313,"line_start":32,"line_end":32,"column_start":12,"column_end":25},"name":"DecoderReader","qualname":"::read::decoder::DecoderReader","value":"DecoderReader {  }","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"decl_id":null,"docs":" A `Read` implementation that decodes base64 data read from an underlying reader.","sig":null,"attributes":[{"value":"/ A `Read` implementation that decodes base64 data read from an underlying reader.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18683,"byte_end":18767,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18768,"byte_end":18771,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18772,"byte_end":18786,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18787,"byte_end":18790,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18791,"byte_end":18798,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use std::io::Read;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18799,"byte_end":18821,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18822,"byte_end":18846,"line_start":18,"line_end":18,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18847,"byte_end":18850,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // use a cursor as the simplest possible `Read` -- in real code this is probably a file, etc.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18851,"byte_end":18948,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ let mut wrapped_reader = Cursor::new(b\"YXNkZg==\");","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":18949,"byte_end":19003,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"/ let mut decoder = base64::read::DecoderReader::new(","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19004,"byte_end":19059,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/     &mut wrapped_reader, base64::STANDARD);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19060,"byte_end":19107,"line_start":23,"line_end":23,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19108,"byte_end":19111,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ // handle errors as you normally would","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19112,"byte_end":19154,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/ let mut result = Vec::new();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19155,"byte_end":19187,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ decoder.read_to_end(&mut result).unwrap();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19188,"byte_end":19234,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19235,"byte_end":19238,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(b\"asdf\", &result[..]);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19239,"byte_end":19276,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19277,"byte_end":19280,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":19281,"byte_end":19288,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":21027,"byte_end":21030,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<DecoderReader>::new","value":"fn (r: &'a mut R, config: Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that will read from the provided reader `r`.\n","sig":null,"attributes":[{"value":"/ Create a new decoder that will read from the provided reader `r`.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":20946,"byte_end":21015,"line_start":72,"line_end":72,"column_start":5,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/mod.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":172}],"decl_id":null,"docs":" Implementations of `io::Write` to transparently handle base64.\n","sig":null,"attributes":[{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3927,"byte_end":3961,"line_start":91,"line_end":91,"column_start":1,"column_end":35}},{"value":"! Implementations of `io::Write` to transparently handle base64.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/mod.rs","byte_start":82569,"byte_end":82635,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":133},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84737,"byte_end":84750,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"EncoderWriter","qualname":"::write::encoder::EncoderWriter","value":"EncoderWriter {  }","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"decl_id":null,"docs":" A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","sig":null,"attributes":[{"value":"/ A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83137,"byte_end":83231,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83232,"byte_end":83235,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Because base64 has special handling for the end of the input data (padding, etc), there's a","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83236,"byte_end":83331,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ `finish()` method on this type that encodes any leftover input bytes and adds padding if","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83332,"byte_end":83424,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/ appropriate. It's called automatically when deallocated (see the `Drop` implementation), but","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83425,"byte_end":83521,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ any error that occurs when invoking the underlying writer will be suppressed. If you want to","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83522,"byte_end":83618,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ handle such errors, call `finish()` yourself.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83619,"byte_end":83668,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83669,"byte_end":83672,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83673,"byte_end":83687,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83688,"byte_end":83691,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83692,"byte_end":83699,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83700,"byte_end":83723,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83724,"byte_end":83727,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83728,"byte_end":83823,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ let mut wrapped_writer = Vec::new();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83824,"byte_end":83864,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/ {","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83865,"byte_end":83870,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/     let mut enc = base64::write::EncoderWriter::new(","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83871,"byte_end":83927,"line_start":30,"line_end":30,"column_start":1,"column_end":57}},{"value":"/         &mut wrapped_writer, base64::STANDARD);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83928,"byte_end":83979,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83980,"byte_end":83983,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/     // handle errors as you normally would","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":83984,"byte_end":84030,"line_start":33,"line_end":33,"column_start":1,"column_end":47}},{"value":"/     enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84031,"byte_end":84071,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/     // could leave this out to be called by Drop, if you don't care","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84072,"byte_end":84143,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/     // about handling errors","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84144,"byte_end":84176,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/     enc.finish().unwrap();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84177,"byte_end":84207,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84208,"byte_end":84211,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ }","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84212,"byte_end":84217,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84218,"byte_end":84221,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // base64 was written to the writer","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84222,"byte_end":84261,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(b\"YXNkZg==\", &wrapped_writer[..]);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84262,"byte_end":84311,"line_start":42,"line_end":42,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84312,"byte_end":84315,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84316,"byte_end":84323,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84324,"byte_end":84327,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84328,"byte_end":84340,"line_start":46,"line_end":46,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84341,"byte_end":84344,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Calling `write()` after `finish()` is invalid and will panic.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84345,"byte_end":84410,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84411,"byte_end":84414,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84415,"byte_end":84427,"line_start":50,"line_end":50,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84428,"byte_end":84431,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ Base64 encoding itself does not generate errors, but errors from the wrapped writer will be","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84432,"byte_end":84527,"line_start":52,"line_end":52,"column_start":1,"column_end":96}},{"value":"/ returned as per the contract of `Write`.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84528,"byte_end":84572,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84573,"byte_end":84576,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84577,"byte_end":84594,"line_start":55,"line_end":55,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84595,"byte_end":84598,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ It has some minor performance loss compared to encoding slices (a couple percent).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84599,"byte_end":84685,"line_start":57,"line_end":57,"column_start":1,"column_end":87}},{"value":"/ It does not do any heap allocation.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":84686,"byte_end":84725,"line_start":58,"line_end":58,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86264,"byte_end":86267,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderWriter>::new","value":"fn (w: &'a mut W, config: Config) -> EncoderWriter<'a, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that will write to the provided delegate writer `w`.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that will write to the provided delegate writer `w`.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86175,"byte_end":86252,"line_start":93,"line_end":93,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":87177,"byte_end":87183,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"finish","qualname":"<EncoderWriter>::finish","value":"fn (&mut self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data and write it, including any trailing incomplete input\n triples and associated padding.","sig":null,"attributes":[{"value":"/ Encode all remaining buffered data and write it, including any trailing incomplete input","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86631,"byte_end":86723,"line_start":107,"line_end":107,"column_start":5,"column_end":97}},{"value":"/ triples and associated padding.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86728,"byte_end":86763,"line_start":108,"line_end":108,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86768,"byte_end":86771,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Once this succeeds, no further writes can be performed, as that would produce invalid","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86776,"byte_end":86865,"line_start":110,"line_end":110,"column_start":5,"column_end":94}},{"value":"/ base64.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86870,"byte_end":86881,"line_start":111,"line_end":111,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86886,"byte_end":86889,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This may write to the delegate writer multiple times if the delegate writer does not accept all input provided","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86894,"byte_end":87008,"line_start":113,"line_end":113,"column_start":5,"column_end":119}},{"value":"/ to its `write` each invocation.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":87013,"byte_end":87048,"line_start":114,"line_end":114,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":87053,"byte_end":87056,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":87061,"byte_end":87073,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":87078,"byte_end":87081,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ The first error that is not of [`ErrorKind::Interrupted`] will be returned.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":87086,"byte_end":87165,"line_start":118,"line_end":118,"column_start":5,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97906,"byte_end":97912,"line_start":23,"line_end":23,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode::encode","value":"fn <T> (input: T) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.\nConvenience for `encode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97560,"byte_end":97597,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97598,"byte_end":97618,"line_start":9,"line_end":9,"column_start":1,"column_end":21}},{"value":"/Convenience for `encode_config(input, base64::STANDARD);`.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97619,"byte_end":97680,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97681,"byte_end":97684,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97685,"byte_end":97697,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97698,"byte_end":97701,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97702,"byte_end":97712,"line_start":14,"line_end":14,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97713,"byte_end":97736,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97737,"byte_end":97740,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97741,"byte_end":97755,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode(b\"hello world\");","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97756,"byte_end":97804,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97805,"byte_end":97832,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97833,"byte_end":97837,"line_start":20,"line_end":20,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97838,"byte_end":97844,"line_start":21,"line_end":21,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97845,"byte_end":97898,"line_start":22,"line_end":22,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98417,"byte_end":98430,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"encode_config","qualname":"::encode::encode_config","value":"fn <T> (input: T, config: Config) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":97989,"byte_end":98026,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98027,"byte_end":98047,"line_start":28,"line_end":28,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98048,"byte_end":98051,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98052,"byte_end":98064,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98065,"byte_end":98068,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98069,"byte_end":98079,"line_start":32,"line_end":32,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98080,"byte_end":98103,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98104,"byte_end":98107,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98108,"byte_end":98122,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode_config(b\"hello world~\", base64::STANDARD);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98123,"byte_end":98197,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98198,"byte_end":98225,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98226,"byte_end":98229,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/    let b64_url = base64::encode_config(b\"hello internet~\", base64::URL_SAFE);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98230,"byte_end":98311,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", b64_url);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98312,"byte_end":98343,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98344,"byte_end":98348,"line_start":41,"line_end":41,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98349,"byte_end":98355,"line_start":42,"line_end":42,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98356,"byte_end":98409,"line_start":43,"line_end":43,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":186},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99338,"byte_end":99355,"line_start":74,"line_end":74,"column_start":8,"column_end":25},"name":"encode_config_buf","qualname":"::encode::encode_config_buf","value":"fn <T> (input: T, config: Config, buf: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nWrites into the supplied output buffer, which will grow the buffer if needed.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98794,"byte_end":98831,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"/Writes into the supplied output buffer, which will grow the buffer if needed.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98832,"byte_end":98912,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98913,"byte_end":98916,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98917,"byte_end":98929,"line_start":58,"line_end":58,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98930,"byte_end":98933,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98934,"byte_end":98944,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98945,"byte_end":98968,"line_start":61,"line_end":61,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98969,"byte_end":98972,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98973,"byte_end":98987,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/    let mut buf = String::new();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":98988,"byte_end":99023,"line_start":64,"line_end":64,"column_start":1,"column_end":36}},{"value":"/    base64::encode_config_buf(b\"hello world~\", base64::STANDARD, &mut buf);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99024,"byte_end":99102,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99103,"byte_end":99130,"line_start":66,"line_end":66,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99131,"byte_end":99134,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/    buf.clear();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99135,"byte_end":99154,"line_start":68,"line_end":68,"column_start":1,"column_end":20}},{"value":"/    base64::encode_config_buf(b\"hello internet~\", base64::URL_SAFE, &mut buf);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99155,"byte_end":99236,"line_start":69,"line_end":69,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99237,"byte_end":99264,"line_start":70,"line_end":70,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99265,"byte_end":99269,"line_start":71,"line_end":71,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99270,"byte_end":99276,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99277,"byte_end":99330,"line_start":73,"line_end":73,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":188},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100631,"byte_end":100650,"line_start":117,"line_end":117,"column_start":8,"column_end":27},"name":"encode_config_slice","qualname":"::encode::encode_config_slice","value":"fn <T> (input: T, config: Config, output: &mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64.\n Writes into the supplied output buffer.","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99721,"byte_end":99759,"line_start":87,"line_end":87,"column_start":1,"column_end":39}},{"value":"/ Writes into the supplied output buffer.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99760,"byte_end":99803,"line_start":88,"line_end":88,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99804,"byte_end":99807,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99808,"byte_end":99904,"line_start":90,"line_end":90,"column_start":1,"column_end":97}},{"value":"/ or statically-allocated buffer).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99905,"byte_end":99941,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99942,"byte_end":99945,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99946,"byte_end":99958,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99959,"byte_end":99962,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ If `output` is too small to hold the encoded version of `input`, a panic will result.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":99963,"byte_end":100052,"line_start":95,"line_end":95,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100053,"byte_end":100056,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100057,"byte_end":100070,"line_start":97,"line_end":97,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100071,"byte_end":100074,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100075,"byte_end":100086,"line_start":99,"line_end":99,"column_start":1,"column_end":12}},{"value":"/ extern crate base64;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100087,"byte_end":100111,"line_start":100,"line_end":100,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100112,"byte_end":100115,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100116,"byte_end":100131,"line_start":102,"line_end":102,"column_start":1,"column_end":16}},{"value":"/     let s = b\"hello internet!\";","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100132,"byte_end":100167,"line_start":103,"line_end":103,"column_start":1,"column_end":36}},{"value":"/     let mut buf = Vec::new();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100168,"byte_end":100201,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/     // make sure we'll have a slice big enough for base64 + padding","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100202,"byte_end":100273,"line_start":105,"line_end":105,"column_start":1,"column_end":72}},{"value":"/     buf.resize(s.len() * 4 / 3 + 4, 0);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100274,"byte_end":100317,"line_start":106,"line_end":106,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100318,"byte_end":100321,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/     let bytes_written = base64::encode_config_slice(s,","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100322,"byte_end":100380,"line_start":108,"line_end":108,"column_start":1,"column_end":59}},{"value":"/                             base64::STANDARD, &mut buf);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100381,"byte_end":100441,"line_start":109,"line_end":109,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100442,"byte_end":100445,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/     // shorten our vec down to just what was written","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100446,"byte_end":100502,"line_start":111,"line_end":111,"column_start":1,"column_end":57}},{"value":"/     buf.resize(bytes_written, 0);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100503,"byte_end":100540,"line_start":112,"line_end":112,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100541,"byte_end":100544,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(s, base64::decode(&buf).unwrap().as_slice());","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100545,"byte_end":100609,"line_start":114,"line_end":114,"column_start":1,"column_end":65}},{"value":"/ }","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100610,"byte_end":100615,"line_start":115,"line_end":115,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/encode.rs","byte_start":100616,"byte_end":100623,"line_start":116,"line_end":116,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":282},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":121985,"byte_end":121996,"line_start":30,"line_end":30,"column_start":5,"column_end":16},"name":"InvalidByte","qualname":"::decode::DecodeError::InvalidByte","value":"DecodeError::InvalidByte(usize, u8)","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" An invalid byte was found in the input. The offset and offending byte are provided.\n","sig":null,"attributes":[{"value":"/ An invalid byte was found in the input. The offset and offending byte are provided.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":121893,"byte_end":121980,"line_start":29,"line_end":29,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":286},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":122057,"byte_end":122070,"line_start":32,"line_end":32,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::decode::DecodeError::InvalidLength","value":"DecodeError::InvalidLength","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" The length of the input is invalid.\n","sig":null,"attributes":[{"value":"/ The length of the input is invalid.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":122013,"byte_end":122052,"line_start":31,"line_end":31,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":288},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":122413,"byte_end":122430,"line_start":37,"line_end":37,"column_start":5,"column_end":22},"name":"InvalidLastSymbol","qualname":"::decode::DecodeError::InvalidLastSymbol","value":"DecodeError::InvalidLastSymbol(usize, u8)","parent":{"krate":0,"index":281},"children":[],"decl_id":null,"docs":" The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n This is indicative of corrupted or truncated Base64.\n Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for\n symbols that are in the alphabet but represent nonsensical encodings.\n","sig":null,"attributes":[{"value":"/ The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":122076,"byte_end":122172,"line_start":33,"line_end":33,"column_start":5,"column_end":101}},{"value":"/ This is indicative of corrupted or truncated Base64.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":122177,"byte_end":122233,"line_start":34,"line_end":34,"column_start":5,"column_end":61}},{"value":"/ Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":122238,"byte_end":122330,"line_start":35,"line_end":35,"column_start":5,"column_end":97}},{"value":"/ symbols that are in the alphabet but represent nonsensical encodings.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":122335,"byte_end":122408,"line_start":36,"line_end":36,"column_start":5,"column_end":78}}]},{"kind":"Enum","id":{"krate":0,"index":281},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":121875,"byte_end":121886,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::decode::DecodeError","value":"DecodeError::{InvalidByte, InvalidLength, InvalidLastSymbol}","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":286},{"krate":0,"index":288}],"decl_id":null,"docs":" Errors that can occur while decoding.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while decoding.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":121785,"byte_end":121826,"line_start":26,"line_end":26,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123776,"byte_end":123782,"line_start":84,"line_end":84,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode::decode","value":"fn <T> (input: T) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.\nConvenience `decode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123389,"byte_end":123431,"line_start":69,"line_end":69,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123432,"byte_end":123473,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"/Convenience `decode_config(input, base64::STANDARD);`.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123474,"byte_end":123531,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123532,"byte_end":123535,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123536,"byte_end":123548,"line_start":73,"line_end":73,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123549,"byte_end":123552,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123553,"byte_end":123563,"line_start":75,"line_end":75,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123564,"byte_end":123587,"line_start":76,"line_end":76,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123588,"byte_end":123591,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123592,"byte_end":123606,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode(\"aGVsbG8gd29ybGQ=\").unwrap();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123607,"byte_end":123670,"line_start":79,"line_end":79,"column_start":1,"column_end":64}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123671,"byte_end":123702,"line_start":80,"line_end":80,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123703,"byte_end":123707,"line_start":81,"line_end":81,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123708,"byte_end":123714,"line_start":82,"line_end":82,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123715,"byte_end":123768,"line_start":83,"line_end":83,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":227},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124380,"byte_end":124393,"line_start":105,"line_end":105,"column_start":8,"column_end":21},"name":"decode_config","qualname":"::decode::decode_config","value":"fn <T> (input: T, config: Config) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123881,"byte_end":123923,"line_start":88,"line_end":88,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123924,"byte_end":123965,"line_start":89,"line_end":89,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123966,"byte_end":123969,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123970,"byte_end":123982,"line_start":91,"line_end":91,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123983,"byte_end":123986,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123987,"byte_end":123997,"line_start":93,"line_end":93,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123998,"byte_end":124021,"line_start":94,"line_end":94,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124022,"byte_end":124025,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124026,"byte_end":124040,"line_start":96,"line_end":96,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode_config(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD).unwrap();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124041,"byte_end":124133,"line_start":97,"line_end":97,"column_start":1,"column_end":93}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124134,"byte_end":124165,"line_start":98,"line_end":98,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124166,"byte_end":124169,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/    let bytes_url = base64::decode_config(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE).unwrap();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124170,"byte_end":124270,"line_start":100,"line_end":100,"column_start":1,"column_end":101}},{"value":"/    println!(\"{:?}\", bytes_url);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124271,"byte_end":124306,"line_start":101,"line_end":101,"column_start":1,"column_end":36}},{"value":"/}","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124307,"byte_end":124311,"line_start":102,"line_end":102,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124312,"byte_end":124318,"line_start":103,"line_end":103,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124319,"byte_end":124372,"line_start":104,"line_end":104,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125270,"byte_end":125287,"line_start":133,"line_end":133,"column_start":8,"column_end":25},"name":"decode_config_buf","qualname":"::decode::decode_config_buf","value":"fn <T> (input: T, config: Config, buffer: &mut Vec<u8>) -> Result<(), DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nWrites into the supplied buffer to avoid allocation.\nReturns a Result containing an empty tuple, aka ().","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124617,"byte_end":124659,"line_start":111,"line_end":111,"column_start":1,"column_end":43}},{"value":"/Writes into the supplied buffer to avoid allocation.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124660,"byte_end":124715,"line_start":112,"line_end":112,"column_start":1,"column_end":56}},{"value":"/Returns a Result containing an empty tuple, aka ().","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124716,"byte_end":124770,"line_start":113,"line_end":113,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124771,"byte_end":124774,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124775,"byte_end":124787,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124788,"byte_end":124791,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124792,"byte_end":124802,"line_start":117,"line_end":117,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124803,"byte_end":124826,"line_start":118,"line_end":118,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124827,"byte_end":124830,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124831,"byte_end":124845,"line_start":120,"line_end":120,"column_start":1,"column_end":15}},{"value":"/    let mut buffer = Vec::<u8>::new();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124846,"byte_end":124887,"line_start":121,"line_end":121,"column_start":1,"column_end":42}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD, &mut buffer).unwrap();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124888,"byte_end":124985,"line_start":122,"line_end":122,"column_start":1,"column_end":98}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":124986,"byte_end":125018,"line_start":123,"line_end":123,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125019,"byte_end":125022,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/    buffer.clear();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125023,"byte_end":125045,"line_start":125,"line_end":125,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125046,"byte_end":125049,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE, &mut buffer)","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125050,"byte_end":125141,"line_start":127,"line_end":127,"column_start":1,"column_end":92}},{"value":"/        .unwrap();","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125142,"byte_end":125163,"line_start":128,"line_end":128,"column_start":1,"column_end":22}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125164,"byte_end":125196,"line_start":129,"line_end":129,"column_start":1,"column_end":33}},{"value":"/}","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125197,"byte_end":125201,"line_start":130,"line_end":130,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125202,"byte_end":125208,"line_start":131,"line_end":131,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":125209,"byte_end":125262,"line_start":132,"line_end":132,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":233},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126543,"byte_end":126562,"line_start":169,"line_end":169,"column_start":8,"column_end":27},"name":"decode_config_slice","qualname":"::decode::decode_config_slice","value":"fn <T> (input: T, config: Config, output: &mut [u8]) -> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode the input into the provided output slice.","sig":null,"attributes":[{"value":"/ Decode the input into the provided output slice.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126052,"byte_end":126104,"line_start":160,"line_end":160,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126105,"byte_end":126108,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ This will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126109,"byte_end":126208,"line_start":162,"line_end":162,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126209,"byte_end":126212,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ If you don't know ahead of time what the decoded length should be, size your buffer with a","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126213,"byte_end":126307,"line_start":164,"line_end":164,"column_start":1,"column_end":95}},{"value":"/ conservative estimate for the decoded length of an input: 3 bytes of output for every 4 bytes of","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126308,"byte_end":126408,"line_start":165,"line_end":165,"column_start":1,"column_end":101}},{"value":"/ input, rounded up, or in other words `(input_len + 3) / 4 * 3`.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126409,"byte_end":126476,"line_start":166,"line_end":166,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126477,"byte_end":126480,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ If the slice is not large enough, this will panic.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":126481,"byte_end":126535,"line_start":168,"line_end":168,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":304},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4604,"byte_end":4612,"line_start":113,"line_end":113,"column_start":5,"column_end":13},"name":"Standard","qualname":"::CharacterSet::Standard","value":"CharacterSet::Standard","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" The standard character set (uses `+` and `/`).","sig":null,"attributes":[{"value":"/ The standard character set (uses `+` and `/`).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4470,"byte_end":4520,"line_start":110,"line_end":110,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4525,"byte_end":4528,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4533,"byte_end":4599,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":306},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4752,"byte_end":4759,"line_start":117,"line_end":117,"column_start":5,"column_end":12},"name":"UrlSafe","qualname":"::CharacterSet::UrlSafe","value":"CharacterSet::UrlSafe","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" The URL safe character set (uses `-` and `_`).","sig":null,"attributes":[{"value":"/ The URL safe character set (uses `-` and `_`).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4618,"byte_end":4668,"line_start":114,"line_end":114,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4673,"byte_end":4676,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4681,"byte_end":4747,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":308},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4985,"byte_end":4990,"line_start":121,"line_end":121,"column_start":5,"column_end":10},"name":"Crypt","qualname":"::CharacterSet::Crypt","value":"CharacterSet::Crypt","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","sig":null,"attributes":[{"value":"/ The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4765,"byte_end":4872,"line_start":118,"line_end":118,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4877,"byte_end":4880,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Not standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4885,"byte_end":4980,"line_start":120,"line_end":120,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":310},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":5152,"byte_end":5161,"line_start":125,"line_end":125,"column_start":5,"column_end":14},"name":"ImapMutf7","qualname":"::CharacterSet::ImapMutf7","value":"CharacterSet::ImapMutf7","parent":{"krate":0,"index":303},"children":[],"decl_id":null,"docs":" The character set used in IMAP-modified UTF-7 (uses `+` and `,`).","sig":null,"attributes":[{"value":"/ The character set used in IMAP-modified UTF-7 (uses `+` and `,`).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4996,"byte_end":5065,"line_start":122,"line_end":122,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":5070,"byte_end":5073,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":5078,"byte_end":5147,"line_start":124,"line_end":124,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":303},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4451,"byte_end":4463,"line_start":109,"line_end":109,"column_start":10,"column_end":22},"name":"CharacterSet","qualname":"::CharacterSet","value":"CharacterSet::{Standard, UrlSafe, Crypt, ImapMutf7}","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310}],"decl_id":null,"docs":" Available encoding character sets\n","sig":null,"attributes":[{"value":"/ Available encoding character sets","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":4374,"byte_end":4411,"line_start":107,"line_end":107,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":317},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":5958,"byte_end":5964,"line_start":150,"line_end":150,"column_start":12,"column_end":18},"name":"Config","qualname":"::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"decl_id":null,"docs":" Contains configuration parameters for base64 encoding\n","sig":null,"attributes":[{"value":"/ Contains configuration parameters for base64 encoding","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":5859,"byte_end":5916,"line_start":148,"line_end":148,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6283,"byte_end":6286,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<Config>::new","value":"fn (char_set: CharacterSet, pad: bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Config`.\n","sig":null,"attributes":[{"value":"/ Create a new `Config`.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6245,"byte_end":6271,"line_start":160,"line_end":160,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6521,"byte_end":6524,"line_start":170,"line_end":170,"column_start":12,"column_end":15},"name":"pad","qualname":"<Config>::pad","value":"fn (self, pad: bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to pad output with `=` characters.\n","sig":null,"attributes":[{"value":"/ Sets whether to pad output with `=` characters.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6458,"byte_end":6509,"line_start":169,"line_end":169,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6806,"byte_end":6832,"line_start":178,"line_end":178,"column_start":12,"column_end":38},"name":"decode_allow_trailing_bits","qualname":"<Config>::decode_allow_trailing_bits","value":"fn (self, allow: bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to emit errors for nonzero trailing bits.","sig":null,"attributes":[{"value":"/ Sets whether to emit errors for nonzero trailing bits.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6596,"byte_end":6654,"line_start":174,"line_end":174,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6659,"byte_end":6662,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This is useful when implementing","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6667,"byte_end":6703,"line_start":176,"line_end":176,"column_start":5,"column_end":41}},{"value":"/ [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6708,"byte_end":6794,"line_start":177,"line_end":177,"column_start":5,"column_end":91}}]},{"kind":"Const","id":{"krate":0,"index":259},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7017,"byte_end":7025,"line_start":187,"line_end":187,"column_start":11,"column_end":19},"name":"STANDARD","qualname":"::STANDARD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set with padding.\n","sig":null,"attributes":[{"value":"/ Standard character set with padding.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6966,"byte_end":7006,"line_start":186,"line_end":186,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":260},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7195,"byte_end":7210,"line_start":194,"line_end":194,"column_start":11,"column_end":26},"name":"STANDARD_NO_PAD","qualname":"::STANDARD_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set without padding.\n","sig":null,"attributes":[{"value":"/ Standard character set without padding.","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7141,"byte_end":7184,"line_start":193,"line_end":193,"column_start":1,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":261},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7377,"byte_end":7385,"line_start":201,"line_end":201,"column_start":11,"column_end":19},"name":"URL_SAFE","qualname":"::URL_SAFE","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set with padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set with padding","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7327,"byte_end":7366,"line_start":200,"line_end":200,"column_start":1,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":262},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7553,"byte_end":7568,"line_start":208,"line_end":208,"column_start":11,"column_end":26},"name":"URL_SAFE_NO_PAD","qualname":"::URL_SAFE_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set without padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set without padding","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7500,"byte_end":7542,"line_start":207,"line_end":207,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":263},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7729,"byte_end":7734,"line_start":215,"line_end":215,"column_start":11,"column_end":16},"name":"CRYPT","qualname":"::CRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" As per `crypt(3)` requirements\n","sig":null,"attributes":[{"value":"/ As per `crypt(3)` requirements","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7684,"byte_end":7718,"line_start":214,"line_end":214,"column_start":1,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":264},"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7895,"byte_end":7905,"line_start":222,"line_end":222,"column_start":11,"column_end":21},"name":"IMAP_MUTF7","qualname":"::IMAP_MUTF7","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" IMAP modified UTF-7 requirements\n","sig":null,"attributes":[{"value":"/ IMAP modified UTF-7 requirements","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":7848,"byte_end":7884,"line_start":221,"line_end":221,"column_start":1,"column_end":37}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/chunked_encoder.rs","byte_start":8704,"byte_end":8718,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/chunked_encoder.rs","byte_start":11038,"byte_end":11048,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/chunked_encoder.rs","byte_start":11223,"byte_end":11233,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16234,"byte_end":16247,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16526,"byte_end":16539,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16860,"byte_end":16873,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":20369,"byte_end":20382,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":20919,"byte_end":20932,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":24245,"byte_end":24258,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":85748,"byte_end":85761,"line_start":79,"line_end":79,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86148,"byte_end":86161,"line_start":92,"line_end":92,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":90285,"byte_end":90298,"line_start":200,"line_end":200,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":97141,"byte_end":97154,"line_start":348,"line_end":348,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":122468,"byte_end":122479,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123030,"byte_end":123041,"line_start":55,"line_end":55,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":5171,"byte_end":5183,"line_start":128,"line_end":128,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6232,"byte_end":6238,"line_start":159,"line_end":159,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3857,"byte_end":3864,"line_start":87,"line_end":87,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":37}},{"kind":"Mod","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3909,"byte_end":3913,"line_start":89,"line_end":89,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":65}},{"kind":"Mod","span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":3970,"byte_end":3975,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":117}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/chunked_encoder.rs","byte_start":8704,"byte_end":8718,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":17},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/chunked_encoder.rs","byte_start":11038,"byte_end":11048,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":27},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/chunked_encoder.rs","byte_start":11223,"byte_end":11233,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":27},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16234,"byte_end":16247,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16526,"byte_end":16539,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":46},"to":{"krate":2,"index":6014}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/display.rs","byte_start":16860,"byte_end":16873,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":56},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":20369,"byte_end":20382,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":79},"to":{"krate":2,"index":6009}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":20919,"byte_end":20932,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":79},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/read/decoder.rs","byte_start":24245,"byte_end":24258,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":79},"to":{"krate":1,"index":2883}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":85748,"byte_end":85761,"line_start":79,"line_end":79,"column_start":35,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":133},"to":{"krate":2,"index":6009}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":86148,"byte_end":86161,"line_start":92,"line_end":92,"column_start":20,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":90285,"byte_end":90298,"line_start":200,"line_end":200,"column_start":30,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":133},"to":{"krate":1,"index":2941}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/write/encoder.rs","byte_start":97141,"byte_end":97154,"line_start":348,"line_end":348,"column_start":29,"column_end":42},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":133},"to":{"krate":2,"index":2093}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":122468,"byte_end":122479,"line_start":40,"line_end":40,"column_start":23,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":281},"to":{"krate":2,"index":6014}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/decode.rs","byte_start":123030,"byte_end":123041,"line_start":55,"line_end":55,"column_start":23,"column_end":34},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":281},"to":{"krate":1,"index":1632}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":5171,"byte_end":5183,"line_start":128,"line_end":128,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/watanabeshunsuke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.12.0/src/lib.rs","byte_start":6232,"byte_end":6238,"line_start":159,"line_end":159,"column_start":6,"column_end":12},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":317},"to":{"krate":4294967295,"index":4294967295}}]}